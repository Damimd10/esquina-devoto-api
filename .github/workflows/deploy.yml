name: Deploy API

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ROLE_TO_ASSUME: ${{ vars.AWS_ROLE_TO_ASSUME }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  ECS_MIGRATE_TASK_FAMILY: ${{ vars.ECS_MIGRATE_TASK_FAMILY || 'nest-api-prod-migrate' }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ECR registry URI
        id: ecr
        run: |
          echo "uri=$(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}" >> $GITHUB_OUTPUT

      - name: Login to ECR
        run: aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "${{ steps.ecr.outputs.uri }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (linux/amd64)
        run: |
          IMAGE="${{ steps.ecr.outputs.uri }}"
          TAG="${GITHUB_SHA::12}"
          docker buildx build \
            --platform linux/amd64 \
            -t "$IMAGE:$TAG" \
            --push .
          echo "image=$IMAGE:$TAG" >> $GITHUB_OUTPUT
        id: image

      # --- Actualizar Task Definition de APP con el nuevo tag ---
      - name: Download current APP task definition
        run: |
          aws ecs describe-task-definition --task-definition "${ECS_SERVICE}" \
            --query 'taskDefinition' > app-td.json

      - name: Render APP task definition (set image)
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: render-app
        with:
          task-definition: app-td.json
          container-name: app
          image: ${{ steps.image.outputs.image }}

      - name: Deploy APP task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        id: deploy-app
        with:
          task-definition: ${{ steps.render-app.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # --- Actualizar Task Definition de MIGRATE al mismo tag (si existe) ---
      - name: Try download MIGRATE task definition
        id: get-migrate
        continue-on-error: true
        run: |
          aws ecs describe-task-definition --task-definition "${ECS_MIGRATE_TASK_FAMILY}" \
            --query 'taskDefinition' > migrate-td.json

      - name: Render MIGRATE task definition (set image)
        if: steps.get-migrate.outcome == 'success'
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: render-migrate
        with:
          task-definition: migrate-td.json
          container-name: migrate
          image: ${{ steps.image.outputs.image }}

      - name: Register MIGRATE task definition
        if: steps.get-migrate.outcome == 'success'
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://${{ steps.render-migrate.outputs.task-definition }}

      - name: Run migrations (one-off task)
        if: steps.get-migrate.outcome == 'success'
        run: |
          # RED: subnets + SG del ALB (truco que ya usamos)
          ALB_ARN=$(aws elbv2 describe-load-balancers --names "${ECS_SERVICE}" \
            --query 'LoadBalancers[0].LoadBalancerArn' --output text)
          SUBNETS=$(aws elbv2 describe-load-balancers --load-balancer-arns "$ALB_ARN" \
            --query 'LoadBalancers[0].AvailabilityZones[].SubnetId' --output text | tr '\t' ',')
          SG_ID=$(aws ec2 describe-security-groups \
            --filters Name=group-name,Values="${ECS_SERVICE}-ecs-sg" \
            --query "SecurityGroups[0].GroupId" --output text)

          TASK_ARN=$(aws ecs run-task \
            --cluster "${ECS_CLUSTER}" \
            --launch-type FARGATE \
            --task-definition "${ECS_MIGRATE_TASK_FAMILY}" \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
            --count 1 \
            --query "tasks[0].taskArn" --output text)

          echo "TASK_ARN=$TASK_ARN"

          # Esperar a que termine y salir si fall√≥
          aws ecs wait tasks-stopped --cluster "${ECS_CLUSTER}" --tasks "$TASK_ARN"
          EXIT_CODE=$(aws ecs describe-tasks --cluster "${ECS_CLUSTER}" --tasks "$TASK_ARN" \
            --query 'tasks[0].containers[0].exitCode' --output text)
          echo "Migrate exit code: $EXIT_CODE"
          test "$EXIT_CODE" = "0"
